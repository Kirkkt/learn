<!-- vim -->
\pagebreak

General ex command line <!-- {{{1 -->
=======================
- `set {option1} {option2}` : issue two set commands (same for setlocal)
    - `set cursorline! hlsearch!`
- `{command1} | {command2}` : issue two ex commands in one line
    - `echo 'hello' | set ruler!`
- `exe {string}` : run the string as an ex command line
    - `exe 'set colorcolumn='.(40+20)`
- `redraw!` : sometimes the vim rendering is corrupted, run this will force vim to redraw
- `q:` : opens command history window
- `put =expression` : evaluate the expression, paste the result and enter normal mode
    - `put =1+2`

\pagebreak

Editing in ex command line <!-- {{{1 -->
==========================
- `<c-r><c-a>` : Pull <CWORD> onto search/command line
- `<c-r><c-w>` : Pull <cword> onto search/command line
- `<c-r>{register}` : Pull the content of {register} onto search/command line
    - `<c-r>/` : last search
    - `<c-r>:` : last ex command
    - `<c-r>@` : last yanked
    - `<c-r>%` : file name

\pagebreak

Vim-shell interactions <!-- {{{1 -->
======================
- `sh` : open a temporary shell, return to vim upon its exit

\pagebreak

File names and paths <!-- {{{1 -->
====================
- `pwd` : echo working directory
- `@%` : path to current file, relative to working directory
    - `echo @%`
- `expand('%:t')` : current file name only
    - `echo expand('%:t')`
- `expand('%:p')` : absolute path to the current file
    - `echo expand('%:p')`
- `expand('%:p:h')` : absolute path to the directory of the current file
    - `echo expand('%:p:h')`
- `expand('%:t:r')` : the name of the current file (without file extension)
    - `echo expand('%:t:r')`

\pagebreak

Buffer management <!-- {{{1 -->
=================
- `badd {file_name}` : add {file-name} to the buffer list without opening it
    - `badd resources/a`
- `bufdo {command}` : run {command} across all buffers.
    - `bufdo echo expand('%:t')`

\pagebreak

File operation <!-- {{{1 -->
==============
- `:edit!` / `:e!` : reload current buffer from disk
- `:E` / `:e.` / `:e .` : open the current directory in netrw
- `X` : crypt the current file
    - `e resouces/encryptme`
    - write something
    - `X`
- `:find {pattern}` : open the file that matches pattern, if multiple files are present it fails
  with message **E77: Too many file names**
    - `find **/*foundm*`
- `enew` : open a new unnamed buffer
- `vnew` : open a new unnamed buffer in the vertical split
- `w {file}` / `write {file}` : save the current buffer to file and remind in the current file
    - `write! resources/write`
        - we are still at vim.md
- `w {file}` / `write {file}` : also works with visual selection
    - visually select a chunk
    - `write! resources/xwrite`
        - we are still at vim.md, with the visually selected piped to the content of xwrite
- `sav {file}` / `saveas {file}` : save the current buffer to file and switch to that file, doesn't
  work with visual selection
    - `sav resources/saveas`
        - we are now at resources/saveas
- `r {file}` / `read {file}` : paste the content of {file} here
    - `read resources/xwrite`
- `r! {command}` : run shell command {command}, paste the output here
    - `r!ls -al`
- `TOhtml` : print the current file (or visual selection) to an html file in a quickfix window,
  defaulted to name **%.html**
    - `TOhtml`
    - `w resources/vim.md.html`
    - `!open resources/vim.md.html`

\pagebreak

Patterns <!-- {{{1 -->
========
Starts and ends <!-- {{{2 -->
---------------
- `^` : start of the line (the very first character, not the first non-white one)
- `$` : end of the line
- `\zs` and `\ze` : start and end of the match
    - `/star\zst and end of the m\zeatch`
- `/v<word>` or `\<word\>` : search for word only, <> sets the boundary for the search pattern,
  typically symbols and whitespaces

Counts <!-- {{{2 -->
------
- `*` : any count of the pattern
- `{2,5}` : count of 2 to 5 of the pattern
    - `/\vr{2,5}`
- `{4,}` : count of at least 4 of the pattern
    - `/\v[tern]{5,}`
- `{,4}` : count of at most 4 of the pattern
    - `/\vt[ern]{,2}$`
- `{4}` : count of exactly 4 of the pattern
    - `/\v\D\d{2}\D`
- `*` : same as {0,}
- `+` : same as {1,}
- `?` : same as {0,1}

Wild cards <!-- {{{2 -->
----------
- `.` : any single character (empty lines won't match)
    - same with `[^\r\n]`
- `\_.` : any single character plus \r and \n
    - `/\v\-\-\>\_.`
    - `/-->\_.`
- `\s` : white space
- `\S` : [^\s]
- `\_s` : \s plus \r and \n
- `\_S` : \S plus \r and \n, similar usage for ``_`` applies to \d, \a, and \w
- `\d` : [0-9] numbers
- `\D` : [^\d]
- `\a` : [a-zA-Z] alphabets
- `\A` : [^\a]
- `\w` : `[a-zA-Z0-9_]` numbers, alphabets and underscore
- `\W` : [^\w]

Sets <!-- {{{2 -->
----
- `[some]` : matches a single character that is s, o, m or e
- `[a-z]` : matches a single lower-case alphabet character
- `[^{pattern}]` : anything but pattern {pattern}
    - `/\vc[^e]i`

Magical <!-- {{{2 -->
-------
- `\v` : very magical mode, almost all special characters carry special vim-only meaning
- `\V` : very non-magical mode, almost no special characters carry special vim-only meaning

\pagebreak

Visual selection mode commands <!-- {{{1 -->
==============================
- `g?` : turn selected text into gibberish
- `w {filename}` : write selected text to {filename}, no switch to that file
- `TOhtml` : print selected text to an html file in a quickfix window, defaulted to name **%.html**

\pagebreak

Maps <!-- {{{1 -->
====
- `map!` : for Insert and Command-line, i.e. imap & cmap
    - `noremap! npmjs http://www.npmjs.org/`
    - then type npmjs in both Insert mode and Command-line mode to see the effect

\pagebreak

inbox <!-- {{{1 -->
=====
    :/^<html>/+1,/^<\/html>/-1d : delete everything between two a html tag, this command starts
        searching from the current cursor position (exclusive), and do the deletion once

    +[1-9] : line number offset, if no number is provided, it defaults to 1.

\pagebreak

Mark <!-- {{{1 -->
====
    :marks : print the active marks list

    ma : place a mark a
    'a : move to the ^ of the line of mark a
    `a : move to the exact location of mark [a-z]

    mA : place a mark A that can be accessed from anywhere
    'A : move to the ^ of the line of mark A in any file
    `A : move to the exact location of mark A in any file

    `. : move to the last edit
    '. : move to the ^ of the last edit

    `` : position before the last jump within current file
    '` : the ^ of position before the last jump within current file

    `^ : location of last insertion
    '^ : the ^ of last insertion

    `[ : start of last change or yank
    '[ : the ^ of start of last change or yank

    `] : end of last change or yank
    '] : the ^ of end of last change or yank

    `< : start of last visual selction
    '< : the ^ of start of last visual selction

    `> : end of last visual selection
    '> : the ^ of end of last visual selection
