<!-- bash -->
\pagebreak

Wildcards <!-- {{{1 -->
=========
- `*` : matches zero or more characters
    - `whereis ~/git/*e*`
- `?` : matches exactly 1 characters
    - `whereis ~/git/?e*`
- `[abc]` : matches any one of a, b or c, notice this doesn't work in fish
    - `whereis ~/git/[dl]*`
- `[e-m]` : matches any one of e to m, inclusive, notice this doesn't work in fish
    - `whereis ~/git/[e-m][a-g][d-h]*`
- `[!abc]` : matches any character but a, b and c, notice this doesn't work in fish
    - `whereis ~/git/[!dl]*`
- `[!e-m]` : matches any character but a, b and c, notice this doesn't work in fish
    - `whereis ~/git/[!e-m][a-g]*`

\pagebreak

Path <!-- {{{1 -->
====

A path is an ordered list. When the operating system uses a path, it search from the beginning of
the ordered list to the end, and stops upon found or termination. Items are separated by colons `:`.

A preceding or trailing colon actually has a meaning - it includes the current directory.

- `:new_path:new_path1` : current directory first, then `new_path`, and the `new_path1`
- `new_path:new_path1:` : `new_path` first, then `new_path1`, and then the current directory
- `new_path:new_path1` : `new_path` first, and the `new_path1`

\pagebreak

ls <!-- {{{1 -->
==
- `ls -d */` : list all directories under the current directory
- `ls --color=never` : linux only, list without color
- `ls -p` : all forward slash / to the end of directories
- `ls -r` : list in reverse order

\pagebreak

kill <!-- {{{1 -->
====
kill <!-- {{{2 -->
----
- `kill process_id` : kill a process specified by process_id, which can be found via
  `ps aux|grep some_search_keywords`

killall <!-- {{{2 -->
-------
- `killall node` : kills all running node commands
- `killall -I` : case insensitive
- `killall -i` : interactive mode, prompts before kill

\pagebreak

rm <!-- {{{1 -->
==
- `rm -v` : verbose mode, show files deleted

\pagebreak

mv <!-- {{{1 -->
==
- `mv file1 file2 file3 dir1 dir2/ dir3 destination_directory/` : mv multiple files and
  directories into one directory, this will fail if the last argument is not a directory
- `mv -v` : verbose mode, useful when used with wildcards
- `mv -i` : interactive mode, prompts before overwrite
- `mv -u` : linux only, update mode, overwrite only if source is newer than destination, otherwise
  doesn't do anything
- `mv -n` : do not overwrite. Skips silents when destination has already existed.
- `mv -f` : force mode, always overwrite.
- `mv -b` : linux only, overwrites but creates a backup file that looks something like
  destination.file~

\pagebreak

Pipe <!-- {{{1 -->
====
Show no error message <!-- {{{2 -->
---------------------
- `some_commend 2> /dev/null` : display no error message
    - `mkdir /tmp` : displays error message: dir /tmp exists
    - `mkdir /tmp 2> /dev/null` : displays no error message

\pagebreak

lxsplit <!-- {{{1 -->
=======
- `lxsplit -s {file_name} 300m` : split huge.file into chunks not exceeding 300m
    - `cd resources/; lxsplit -s lxsplit-big-file 20k; cd ..`
- `lxsplit -j {file_name}.001` : join parts starting huge.file.001
    - `cd resources/; lxsplit -j lxsplit-parts.001; cd ..`

\pagebreak

uname <!-- {{{1 -->
=====
Determine if my system is 32bit or 64bit <!-- {{{2 -->
----------------------------------------
- `uname -m`
    - if the output is **i686** or **i386**, it means 32bit
    - if the output is **x86_64**, it means 64bit

\pagebreak

eval <!-- {{{1 -->
====
- `eval "command"` : run a string as a command
    - `eval "echo $PATH"` : same as echo $PATH

A example with fish <!-- {{{2 -->
-------------------
    type _cdanddo > /dev/null 2>&1; or function _cdanddo
      cd $argv[1]
      eval $argv[2]
      cd -
    end

    type gitdo > /dev/null 2>&1; or function gitdo
      _cdanddo ~/github/dot-files $argv[1]
      _cdanddo ~/github/learn $argv[1]
      _cdanddo ~/git/active-notes $argv[1]
      _cdanddo ~/git/legacy-notes $argv[1]
      _cdanddo ~/git/drawer $argv[1]
      _cdanddo ~/git/stash $argv[1]
    end

    type pullall > /dev/null 2>&1; or function pullall
      gitdo "git pull"
    end

    type pushall > /dev/null 2>&1; or function pushall
      gitdo "git push"
    end

    type stall > /dev/null 2>&1; or function stall
      gitdo "git status"
    end

    type gdall > /dev/null 2>&1; or function gdall
      gitdo "git diff"
    end

